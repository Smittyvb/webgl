/* Generated by the Nim Compiler v0.14.2 */
/*   (c) 2016 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3238 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11677 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3285 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3224 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3236 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3240 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3240 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3240.node = NNI3240;
var NNI3236 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3236.node = NNI3236;
NTI3285.base = NTI3224;
var NNI3224 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3285, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3224.node = NNI3224;
var NNI3208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3208.node = NNI3208;
NTI3224.base = NTI3208;
NTI3236.base = NTI3224;
NTI3240.base = NTI3236;
var NNI11677 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI11677.node = NNI11677;
var NNI3238 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3238.node = NNI3238;
NTI3238.base = NTI3236;
function makeNimstrLit(c_13003) {

    var ln = c_13003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function arrayConstr(len_18603, value_18604, typ_18605) {

      var result = new Array(len_18603);
      for (var i = 0; i < len_18603; ++i) result[i] = nimCopy(null, value_18604, typ_18605);
      return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18115, src_18116, ti_18117) {

var result_18429 = null;
switch (ti_18117.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18098(ti_18117))) {
result_18429 = src_18116;
}
else {
result_18429 = [src_18116[0], src_18116[1]];}


break;
case 19:       if (dest_18115 === null || dest_18115 === undefined) {
        dest_18115 = {};
      }
      else {
        for (var key in dest_18115) { delete dest_18115[key]; }
      }
      for (var key in src_18116) { dest_18115[key] = src_18116[key]; }
      result_18429 = dest_18115;
    
break;
case 18: case 17: if (!((ti_18117.base == null))) {
result_18429 = nimCopy(dest_18115, src_18116, ti_18117.base);
}
else {
if ((ti_18117.kind == 17)) {
result_18429 = (dest_18115 === null || dest_18115 === undefined) ? {m_type: ti_18117} : dest_18115;}
else {
result_18429 = (dest_18115 === null || dest_18115 === undefined) ? {} : dest_18115;}
}
nimCopyAux(result_18429, src_18116, ti_18117.node);

break;
case 24: case 4: case 27: case 16:       if (src_18116 === null) {
        result_18429 = null;
      }
      else {
        if (dest_18115 === null || dest_18115 === undefined) {
          dest_18115 = new Array(src_18116.length);
        }
        else {
          dest_18115.length = src_18116.length;
        }
        result_18429 = dest_18115;
        for (var i = 0; i < src_18116.length; ++i) {
          result_18429[i] = nimCopy(result_18429[i], src_18116[i], ti_18117.base);
        }
      }
    
break;
case 28:       if (src_18116 !== null) {
        result_18429 = src_18116.slice(0);
      }
    
break;
default: 
result_18429 = src_18116;
break;
}
return result_18429;
}
function cstrToNimstr(c_13203) {

  var ln = c_13203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function raiseException(e_12005, ename_12006) {

e_12005.name = ename_12006;
if ((excHandler == 0)) {
unhandledException(e_12005);
}

throw e_12005;}
function toJSStr(s_13403) {

    var len = s_13403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13403[i] < 128)
        asciiPart[i] = fcc(s_13403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
var nimvm_5354 = false;
var nim_program_result = 0;
var globalraisehook_9813 = [null];
var localraisehook_9818 = [null];
var outofmemhook_9821 = [null];
function isfatpointer_18098(ti_18100) {

var result_18101 = false;
BeforeRet: do {
result_18101 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18100.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18101;
}
function nimCopyAux(dest_18120, src_18121, n_18123) {

switch (n_18123.kind) {
case 0: 
break;
case 1:       dest_18120[n_18123.offset] = nimCopy(dest_18120[n_18123.offset], src_18121[n_18123.offset], n_18123.typ);
    
break;
case 2: L1: do {
var i_18415 = 0;
var HEX3Atmp_18417 = 0;
HEX3Atmp_18417 = (n_18123.len - 1);
var res_18420 = 0;
L2: do {
L3: while (true) {
if (!(res_18420 <= HEX3Atmp_18417)) break L3;
i_18415 = res_18420;
nimCopyAux(dest_18120, src_18121, n_18123.sons[i_18415]);
res_18420 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18120[n_18123.offset] = nimCopy(dest_18120[n_18123.offset], src_18121[n_18123.offset], n_18123.typ);
      for (var i = 0; i < n_18123.sons.length; ++i) {
        nimCopyAux(dest_18120, src_18121, n_18123.sons[i][1]);
      }
    
break;
}
}
function add_9837(x_9840, x_9840_Idx, y_9841) {

var F={procname:"system.add",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
        var len = x_9840[0].length-1;
        for (var i = 0; i < y_9841.length; ++i) {
          x_9840[0][len] = y_9841.charCodeAt(i);
          ++len;
        }
        x_9840[0][len] = 0
      framePtr = framePtr.prev;
}
function auxwritestacktrace_11672(f_11674) {

var Tmp3;
var result_11675 = [null];
var it_11683 = f_11674;
var i_11684 = 0;
var total_11685 = 0;
var tempframes_11689 = arrayConstr(64, {Field0: null, Field1: 0}, NTI11677);
L1: do {
L2: while (true) {
if (!!((it_11683 == null))) Tmp3 = false; else {Tmp3 = (i_11684 <= 63); }if (!Tmp3) break L2;
tempframes_11689[i_11684].Field0 = it_11683.procname;
tempframes_11689[i_11684].Field1 = it_11683.line;
i_11684 += 1;
total_11685 += 1;
it_11683 = it_11683.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_11683 == null))) break L5;
total_11685 += 1;
it_11683 = it_11683.prev;
}
} while(false);
result_11675[0] = makeNimstrLit("");
if (!((total_11685 == i_11684))) {
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_11675[0] = makeNimstrLit("(");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(cstrToNimstr(((total_11685 - i_11684))+"")); } else { result_11675[0] = cstrToNimstr(((total_11685 - i_11684))+"");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_11675[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_11815 = 0;
var HEX3Atmp_11821 = 0;
HEX3Atmp_11821 = (i_11684 - 1);
var res_11824 = HEX3Atmp_11821;
L7: do {
L8: while (true) {
if (!(0 <= res_11824)) break L8;
j_11815 = res_11824;
add_9837(result_11675, 0, tempframes_11689[j_11815].Field0);
if ((0 < tempframes_11689[j_11815].Field1)) {
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_11675[0] = makeNimstrLit(", line: ");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(cstrToNimstr((tempframes_11689[j_11815].Field1)+"")); } else { result_11675[0] = cstrToNimstr((tempframes_11689[j_11815].Field1)+"");};
}

if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_11675[0] = makeNimstrLit("\x0A");};
res_11824 -= 1;
}
} while(false);
} while(false);
return result_11675[0];
}
function rawwritestacktrace_11828() {

var result_11830 = null;
if (!((framePtr == null))) {
result_11830 = (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_11672(framePtr));
framePtr = null;
}
else {
if (!((lastJSError == null))) {
result_11830 = cstrToNimstr(lastJSError.stack);
}
else {
result_11830 = makeNimstrLit("No stack traceback available\x0A");
}
}
return result_11830;
}
function unhandledException(e_11861) {

var buf_12001 = rawwritestacktrace_11828();
}
function raiseOverflow() {

var e_12810 = null;
e_12810 = {m_type: NTI3240, parent: null, name: null, message: null, trace: null};
e_12810.message = makeNimstrLit("over- or underflow");
raiseException(e_12810, "OverflowError");
}
function raiseDivByZero() {

var e_12826 = null;
e_12826 = {m_type: NTI3238, parent: null, name: null, message: null, trace: null};
e_12826.message = makeNimstrLit("division by zero");
raiseException(e_12826, "DivByZeroError");
}
var vertexpositionattribute_27001 = [0];
var shaderprogram_27048 = [null];
var squareverticesbuffer_27055 = [null];
function getcontextwebgl_26755(c_26757) {

var result_26758 = null;
var F={procname:"webgl.getContextWebGL",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 228;
result_26758 = c_26757.getContext('webgl') || c_26757.getContext('experimental-webgl');framePtr = framePtr.prev;
return result_26758;
}
function getshader_27003(gl_27005, id_27006, kind_27007) {

var result_27008 = null;
var F={procname:"ex1.getShader",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 6;
var shaderscript_27009 = document.getElementById(toJSStr(id_27006));
if ((shaderscript_27009 == null)) {
F.line = 7;
break BeforeRet;
}

F.line = 8;
var thesource_27022 = /**/[makeNimstrLit("")];
F.line = 9;
var currentchild_27023 = shaderscript_27009.firstChild;
L1: do {
F.line = 10;
L2: while (true) {
if (!!((currentchild_27023 == null))) break L2;
if ((currentchild_27023.nodeType == 3)) {
add_9837(thesource_27022, 0, currentchild_27023.nodeValue);
}

F.line = 13;
currentchild_27023 = currentchild_27023.nextSibling;
}
} while(false);
if ((kind_27007 == 102)) {
F.line = 15;
result_27008 = gl_27005.createShader(35632);
}
else {
if ((kind_27007 == 118)) {
F.line = 16;
result_27008 = gl_27005.createShader(35633);
}
else {
F.line = 17;
break BeforeRet;
}
}
gl_27005.shaderSource(result_27008, toJSStr(thesource_27022[0]));
gl_27005.compileShader(result_27008);
F.line = 25;
if (!gl_27005.getShaderParameter(result_27008, gl_27005.COMPILE_STATUS)) {alert('An error occurred compiling the shaders: ' + gl_27005.getShaderInfoLog(result_27008));return null;}; } while (false); 
framePtr = framePtr.prev;
return result_27008;
}
function initshaders_27050(gl_27052) {

var F={procname:"ex1.initShaders",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 29;
var fragmentshader_27053 = getshader_27003(gl_27052, makeNimstrLit("shader-fs"), 102);
F.line = 30;
var vertexshader_27054 = getshader_27003(gl_27052, makeNimstrLit("shader-vs"), 118);
F.line = 33;
shaderprogram_27048[0] = gl_27052.createProgram();
gl_27052.attachShader(shaderprogram_27048[0], vertexshader_27054);
gl_27052.attachShader(shaderprogram_27048[0], fragmentshader_27053);
gl_27052.linkProgram(shaderprogram_27048[0]);
gl_27052.useProgram(shaderprogram_27048[0]);
F.line = 45;
vertexpositionattribute_27001[0] = gl_27052.getAttribLocation(shaderprogram_27048[0], "aVertexPosition");
gl_27052.enableVertexAttribArray(vertexpositionattribute_27001[0]);
framePtr = framePtr.prev;
}
function f32a_26903(s_26906) {

var result_26907 = null;
var F={procname:"webgl.f32A",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 285;
result_26907 = new Float32Array(s_26906);framePtr = framePtr.prev;
return result_26907;
}
function initbuffers_27057(gl_27059) {

var F={procname:"ex1.initBuffers",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 51;
squareverticesbuffer_27055[0] = gl_27059.createBuffer();
gl_27059.bindBuffer(34962, squareverticesbuffer_27055[0]);
F.line = 55;
var vertices_27077 = [1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, 1.0000000000000000e+000, -1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, -1.0000000000000000e+000, 0.0];
gl_27059.bufferData(34962, f32a_26903(vertices_27077), 35044);
framePtr = framePtr.prev;
}
function newseq_27100(len_27104) {

var result_27106 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
result_27106 = new Array(len_27104); for (var i=0;i<len_27104;++i) {result_27106[i]=0.0;}framePtr = framePtr.prev;
return result_27106;
}
function perspective4_27140(a_27148, b_27150, c_27152, d_27154, e_27156) {

var F={procname:"perspective4.perspective4",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 305;
function frustum(a,b,c,d,e,g,f){var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f;};a_27148=c_27152*Math.tan(a_27148*Math.PI/360);b_27150=a_27148*b_27150;result_27157 = frustum(-b_27150,b_27150,-a_27148,a_27148,c_27152,d_27154,e_27156);framePtr = framePtr.prev;
}
function identity4_27189(a_27193) {

var F={procname:"identity4.identity4",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 297;
a_27193[0]=1;a_27193[1]=0;a_27193[2]=0;a_27193[3]=0;a_27193[4]=0;a_27193[5]=1;a_27193[6]=0;a_27193[7]=0;a_27193[8]=0;a_27193[9]=0;a_27193[10]=1;a_27193[11]=0;a_27193[12]=0;a_27193[13]=0;a_27193[14]=0;a_27193[15]=1;result_27194=a_27193framePtr = framePtr.prev;
}
function traslate4_27202(a_27208, b_27210, c_27212) {

var F={procname:"traslate4.traslate4",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 301;
var d=b_27210[0],e=b_27210[1];b_27210=b_27210[2];if(!c_27212||a_27208==c_27212){a_27208[12]=a_27208[0]*d+a_27208[4]*e+a_27208[8]*b_27210+a_27208[12];a_27208[13]=a_27208[1]*d+a_27208[5]*e+a_27208[9]*b_27210+a_27208[13];a_27208[14]=a_27208[2]*d+a_27208[6]*e+a_27208[10]*b_27210+a_27208[14];a_27208[15]=a_27208[3]*d+a_27208[7]*e+a_27208[11]*b_27210+a_27208[15];return a_27208}var g=a_27208[0],f=a_27208[1],h=a_27208[2],i=a_27208[3],j=a_27208[4],k=a_27208[5],l=a_27208[6],o=a_27208[7],m=a_27208[8],n=a_27208[9],p=a_27208[10],r=a_27208[11];c_27212[0]=g;c_27212[1]=f;c_27212[2]=h;c_27212[3]=i;c_27212[4]=j;c_27212[5]=k;c_27212[6]=l;c_27212[7]=o;c_27212[8]=m;c_27212[9]=n;c_27212[10]=p;c_27212[11]=r;c_27212[12]=g*d+j*e+m*b_27210+a_27208[12];c_27212[13]=f*d+k*e+n*b_27210+a_27208[13];c_27212[14]=h*d+l*e+p*b_27210+a_27208[14];c_27212[15]=i*d+o*e+r*b_27210+a_27208[15];result_27213 = c_27212;framePtr = framePtr.prev;
}
function setmatrixuniforms_27078(gl_27080, pm_27081, mv_27082) {

var F={procname:"ex1.setMatrixUniforms",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 66;
var puniform_27083 = gl_27080.getUniformLocation(shaderprogram_27048[0], "uPMatrix");
gl_27080.uniformMatrix4fv(puniform_27083, false, pm_27081);
F.line = 69;
var mvuniform_27084 = gl_27080.getUniformLocation(shaderprogram_27048[0], "uMVMatrix");
gl_27080.uniformMatrix4fv(mvuniform_27084, false, mv_27082);
framePtr = framePtr.prev;
}
function drawscene_27085(gl_27087) {

var F={procname:"ex1.drawScene",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
gl_27087.clear(16640);
F.line = 75;
var perspectivematrix_27136 = f32a_26903(newseq_27100(16));
perspective4_27140(45, 1.3333333333333333e+000, 1.0000000000000001e-001, 1.0000000000000000e+002, perspectivematrix_27136);
F.line = 79;
var mv_27187 = f32a_26903(newseq_27100(16));
identity4_27189(mv_27187);
traslate4_27202(mv_27187, [0.0, 0.0, -6.0000000000000000e+000], mv_27187);
gl_27087.bindBuffer(34962, squareverticesbuffer_27055[0]);
gl_27087.vertexAttribPointer(vertexpositionattribute_27001[0], 3, 5126, false, 0, 0);
setmatrixuniforms_27078(gl_27087, perspectivematrix_27136, mv_27187);
gl_27087.drawArrays(5, 0, 4);
framePtr = framePtr.prev;
}
function HEX3Aanonymous_27215(e_27218) {

var F={procname:"ex1.:anonymous",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 91;
var canvas_27219 = document.getElementById("glcanvas");
F.line = 92;
var gl_27220 = getcontextwebgl_26755(canvas_27219);
gl_27220.clearColor(0.0, 0.0, 0.0, 1.0000000000000000e+000);
gl_27220.clearDepth(1.0000000000000000e+000);
gl_27220.enable(2929);
gl_27220.depthFunc(515);
initshaders_27050(gl_27220);
initbuffers_27057(gl_27220);
drawscene_27085(gl_27220);
framePtr = framePtr.prev;
}
window.onload = HEX3Aanonymous_27215;
