/* Generated by the Nim Compiler v0.16.1 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI33044 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33053 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33066 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33039 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI33034 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI33028 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12809 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3485 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3485.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3485, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI12809 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12809.node = NNI12809;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
NTI33028.base = NTI104;
NTI33034.base = NTI124;
NTI33039.base = NTI124;
NTI33066.base = NTI124;
NTI33053.base = NTI124;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
NTI33044.base = NTI128;
function makeNimstrLit(c_13803) {

    var ln = c_13803.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13803.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_19018, src_19019, ti_19020) {

var result_19429 = null;
switch (ti_19020.kind) {
case 21: case 22: case 23: case 5: if (!(isFatPointer_19001(ti_19020))) {
result_19429 = src_19019;
}
else {
result_19429 = [src_19019[0], src_19019[1]];}


break;
case 19:       if (dest_19018 === null || dest_19018 === undefined) {
        dest_19018 = {};
      }
      else {
        for (var key in dest_19018) { delete dest_19018[key]; }
      }
      for (var key in src_19019) { dest_19018[key] = src_19019[key]; }
      result_19429 = dest_19018;
    
break;
case 18: case 17: if (!((ti_19020.base == null))) {
result_19429 = nimCopy(dest_19018, src_19019, ti_19020.base);
}
else {
if ((ti_19020.kind == 17)) {
result_19429 = (dest_19018 === null || dest_19018 === undefined) ? {m_type: ti_19020} : dest_19018;}
else {
result_19429 = (dest_19018 === null || dest_19018 === undefined) ? {} : dest_19018;}
}
nimCopyAux(result_19429, src_19019, ti_19020.node);

break;
case 24: case 4: case 27: case 16:       if (src_19019 === null) {
        result_19429 = null;
      }
      else {
        if (dest_19018 === null || dest_19018 === undefined) {
          dest_19018 = new Array(src_19019.length);
        }
        else {
          dest_19018.length = src_19019.length;
        }
        result_19429 = dest_19018;
        for (var i = 0; i < src_19019.length; ++i) {
          result_19429[i] = nimCopy(result_19429[i], src_19019[i], ti_19020.base);
        }
      }
    
break;
case 28:       if (src_19019 !== null) {
        result_19429 = src_19019.slice(0);
      }
    
break;
default: 
result_19429 = src_19019;
break;
}
return result_19429;
}
function eqStrings(a_16403, b_16404) {

    if (a_16403 == b_16404) return true;
    if ((!a_16403) || (!b_16404)) return false;
    var alen = a_16403.length;
    if (alen != b_16404.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16403[i] != b_16404[i]) return false;
    return true;
  }
function arrayConstr(len_19603, value_19604, typ_19605) {

      var result = new Array(len_19603);
      for (var i = 0; i < len_19603; ++i) result[i] = nimCopy(null, value_19604, typ_19605);
      return result;
    }
function cstrToNimstr(c_14003) {

  var ln = c_14003.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14003.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_14203) {

    var len = s_14203.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14203[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14203[i] < 128)
        asciiPart[i] = fcc(s_14203[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_13206, ename_13207) {

e_13206.name = ename_13207;
if ((excHandler == 0)) {
unhandledException(e_13206);
}

e_13206.trace = nimCopy(null, rawWriteStackTrace_13028(), NTI138);
throw e_13206;}
var startX_33033 = nimCopy(null, [-7.5000000000000000e-001, 7.5000000000000000e-001, -7.5000000000000000e-001, 7.5000000000000000e-001], NTI33034);
var startY_33038 = nimCopy(null, [-7.5000000000000000e-001, -7.5000000000000000e-001, 7.5000000000000000e-001, 7.5000000000000000e-001], NTI33039);
function divInt(a_17203, b_17204) {

      if (b_17204 == 0) raiseDivByZero();
      if (b_17204 == -1 && a_17203 == 2147483647) raiseOverflow();
      return Math.floor(a_17203 / b_17204);
    }
function addInt(a_16660, b_16661) {

      var result = a_16660 + b_16661;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_17003, b_17004) {

      var result = a_17003 * b_17004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function chckIndx(i_19609, a_19610, b_19611) {

var Tmp1;
var result_19612 = 0;
BeforeRet: do {
if (!(a_19610 <= i_19609)) Tmp1 = false; else {Tmp1 = (i_19609 <= b_19611); }if (Tmp1) {
result_19612 = i_19609;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19612;
}
var freqs_33043 = nimCopy(null, [1.0000000000000000e+000, 1.1892071150027210e+000, 1.2599210498948732e+000, 1.4142135623730951e+000], NTI33044);
var nimvm_5887 = false;
var nim_program_result = 0;
var globalRaiseHook_10805 = [null];
var localRaiseHook_10810 = [null];
var outOfMemHook_10813 = [null];
function isFatPointer_19001(ti_19003) {

var result_19004 = false;
BeforeRet: do {
result_19004 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_19003.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_19004;
}
function nimCopyAux(dest_19023, src_19024, n_19026) {

switch (n_19026.kind) {
case 0: 
break;
case 1:       dest_19023[n_19026.offset] = nimCopy(dest_19023[n_19026.offset], src_19024[n_19026.offset], n_19026.typ);
    
break;
case 2: L1: do {
var i_19415 = 0;
var colontmp__19417 = 0;
colontmp__19417 = (n_19026.len - 1);
var res_19420 = 0;
L2: do {
L3: while (true) {
if (!(res_19420 <= colontmp__19417)) break L3;
i_19415 = res_19420;
nimCopyAux(dest_19023, src_19024, n_19026.sons[i_19415]);
res_19420 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_19023[n_19026.offset] = nimCopy(dest_19023[n_19026.offset], src_19024[n_19026.offset], n_19026.typ);
      for (var i = 0; i < n_19026.sons.length; ++i) {
        nimCopyAux(dest_19023, src_19024, n_19026.sons[i][1]);
      }
    
break;
}
}
function add_10829(x_10832, x_10832_Idx, y_10833) {

        var len = x_10832[0].length-1;
        for (var i = 0; i < y_10833.length; ++i) {
          x_10832[0][len] = y_10833.charCodeAt(i);
          ++len;
        }
        x_10832[0][len] = 0
      }
function auxWriteStackTrace_12804(f_12806) {

var Tmp3;
var result_12807 = [null];
var it_12815 = f_12806;
var i_12816 = 0;
var total_12817 = 0;
var tempFrames_12821 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12809);
L1: do {
L2: while (true) {
if (!!((it_12815 == null))) Tmp3 = false; else {Tmp3 = (i_12816 <= 63); }if (!Tmp3) break L2;
tempFrames_12821[i_12816].Field0 = it_12815.procname;
tempFrames_12821[i_12816].Field1 = it_12815.line;
i_12816 += 1;
total_12817 += 1;
it_12815 = it_12815.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12815 == null))) break L5;
total_12817 += 1;
it_12815 = it_12815.prev;
}
} while(false);
result_12807[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12817 == i_12816))) {
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12807[0] = makeNimstrLit("(");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(cstrToNimstr(((total_12817 - i_12816))+"")); } else { result_12807[0] = cstrToNimstr(((total_12817 - i_12816))+"");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12807[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_13015 = 0;
var colontmp__13021 = 0;
colontmp__13021 = (i_12816 - 1);
var res_13024 = colontmp__13021;
L7: do {
L8: while (true) {
if (!(0 <= res_13024)) break L8;
j_13015 = res_13024;
add_10829(result_12807, 0, tempFrames_12821[j_13015].Field0);
if ((0 < tempFrames_12821[j_13015].Field1)) {
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12807[0] = makeNimstrLit(", line: ");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_12821[j_13015].Field1)+"")); } else { result_12807[0] = cstrToNimstr((tempFrames_12821[j_13015].Field1)+"");};
}

if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12807[0] = makeNimstrLit("\x0A");};
res_13024 -= 1;
}
} while(false);
} while(false);
return result_12807[0];
}
function rawWriteStackTrace_13028() {

var result_13030 = null;
if (!((framePtr == null))) {
result_13030 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_12804(framePtr)), NTI138);
}
else {
result_13030 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_13030;
}
function unhandledException(e_13054) {

var Tmp1;
var buf_13055 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_13054.message, null))) Tmp1 = false; else {Tmp1 = !((e_13054.message[0] == 0)); }if (Tmp1) {
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13055[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(e_13054.message); } else { buf_13055[0] = e_13054.message;};
}
else {
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13055[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13055[0] = makeNimstrLit(" [");};
add_10829(buf_13055, 0, e_13054.name);
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13055[0] = makeNimstrLit("]\x0A");};
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(rawWriteStackTrace_13028()); } else { buf_13055[0] = rawWriteStackTrace_13028();};
var cbuf_13201 = toJSStr(buf_13055[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_13201);
  }
  else {
    throw cbuf_13201;
  }
  }
function raiseOverflow() {

var e_13641 = null;
e_13641 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_13641.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
e_13641.parent = null;
raiseException(e_13641, "OverflowError");
}
function raiseDivByZero() {

var e_13659 = null;
e_13659 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13659.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
e_13659.parent = null;
raiseException(e_13659, "DivByZeroError");
}
var x_33030 = nimCopy(null, [1, 2, 3], NTI33028);
var y_33031 = /**/[nimCopy(null, x_33030, NTI33028)];
var z_33032 = /**/[nimCopy(null, x_33030, NTI33028)];
y_33031[0][0] = 10;
var modelX_33049 = /**/[nimCopy(null, startX_33033, NTI33034)];
var modelY_33050 = /**/[nimCopy(null, startY_33038, NTI33039)];
var vertexShaderCode_33068 = makeNimstrLit("attribute vec2 position;\x0Avoid main(void) {\x0A    gl_Position = vec4(position, 0.0, 1.0);\x0A}\x0A");
var fragmentShaderCode_33069 = makeNimstrLit("void main(void) {\x0A    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\x0A}\x0A");
var canv_33070 = /**/[document.getElementById("glcanvas")];
function initWebGL_33001(canvas_33004) {

var result_33005 = null;
var F={procname:"ex3.initWebGL",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 6;
result_33005 = canvas_33004.getContext("webgl");
if ((result_33005 === null)) {
F.line = 7;
result_33005 = canvas_33004.getContext("experimental-webgl");
}

framePtr = F.prev;
return result_33005;
}
var gl_33071 = /**/[initWebGL_33001(canv_33070[0])];
function newSeq_33085(len_33089) {

var result_33091 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
result_33091 = new Array(len_33089); for (var i=0;i<len_33089;++i) {result_33091[i]=0.0;}framePtr = F.prev;
return result_33091;
}
function makeModel_33051() {

var result_33054 = null;
var F={procname:"ex3.makeModel",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 30;
result_33054 = nimCopy(null, [modelX_33049[0][0], modelY_33050[0][0], modelX_33049[0][1], modelY_33050[0][1], modelX_33049[0][0], modelY_33050[0][0], modelX_33049[0][2], modelY_33050[0][2], modelX_33049[0][0], modelY_33050[0][0], modelX_33049[0][3], modelY_33050[0][3], modelX_33049[0][1], modelY_33050[0][1], modelX_33049[0][3], modelY_33050[0][3], modelX_33049[0][2], modelY_33050[0][2], modelX_33049[0][1], modelY_33050[0][1], modelX_33049[0][2], modelY_33050[0][2], modelX_33049[0][3], modelY_33050[0][3]], NTI33066);
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_33054;
}
var packedModel_33118 = /**/[newSeq_33085((makeModel_33051() != null ? makeModel_33051().length : 0))];
var vertices_33119 = /**/[gl_33071[0].createBuffer()];
var vertexShader_33129 = /**/[gl_33071[0].createShader(35633)];
gl_33071[0].shaderSource(vertexShader_33129[0], toJSStr(vertexShaderCode_33068));
gl_33071[0].compileShader(vertexShader_33129[0]);
function getStatus_28029(gl_28031, what_28032) {

var result_28033 = false;
var F={procname:"webgl.getStatus",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 446;
result_28033 = gl_28031.getShaderParameter(what_28032, gl_28031.COMPILE_STATUS);framePtr = F.prev;
return result_28033;
}
function checkShader_33014(gl_33016, shader_33017) {

var F={procname:"ex3.checkShader",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
if (!(getStatus_28029(gl_33016, shader_33017))) {
console.log(gl_33016.getShaderInfoLog(shader_33017));
}

framePtr = F.prev;
}
checkShader_33014(gl_33071[0], vertexShader_33129[0]);
var fragmentShader_33139 = /**/[gl_33071[0].createShader(35632)];
gl_33071[0].shaderSource(fragmentShader_33139[0], toJSStr(fragmentShaderCode_33069));
gl_33071[0].compileShader(fragmentShader_33139[0]);
checkShader_33014(gl_33071[0], fragmentShader_33139[0]);
var program_33140 = /**/[gl_33071[0].createProgram()];
gl_33071[0].attachShader(program_33140[0], vertexShader_33129[0]);
gl_33071[0].attachShader(program_33140[0], fragmentShader_33139[0]);
gl_33071[0].linkProgram(program_33140[0]);
function getStatus_28034(gl_28036, what_28037) {

var result_28038 = false;
var F={procname:"webgl.getStatus",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 448;
result_28038 = gl_28036.getProgramParameter(what_28037, gl_28036.LINK_STATUS);framePtr = F.prev;
return result_28038;
}
function checkProgram_33021(gl_33023, prog_33024) {

var F={procname:"ex3.checkProgram",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
if (!(getStatus_28034(gl_33023, prog_33024))) {
console.log(gl_33023.getProgramInfoLog(prog_33024));
}

framePtr = F.prev;
}
checkProgram_33021(gl_33071[0], program_33140[0]);
var positionAttrib_33141 = /**/[gl_33071[0].getAttribLocation(program_33140[0], "position")];
var theta_33142 = /**/[0.0];
function pluseq__33250(x_33255, x_33255_Idx, y_33257) {

var F={procname:"+=.+=",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
F.line = 3439;
x_33255[x_33255_Idx] = (x_33255[x_33255_Idx] + y_33257);
framePtr = F.prev;
}
function raiseIndexError() {

var e_13695 = null;
e_13695 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null};
e_13695.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
e_13695.parent = null;
raiseException(e_13695, "IndexError");
}
function draw_33144(gl_33146) {

var F={procname:"ex3.draw",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 86;
var bg_33147 = ((Math.cos(theta_33142[0]) + 1.0000000000000000e+000) / 2.0000000000000000e+000);
F.line = 89;
var model_33148 = makeModel_33051();
F.line = 90;
packedModel_33118[0] = nimCopy(null, model_33148, NTI33053);
gl_33146.bindBuffer(34962, vertices_33119[0]);
gl_33146.bufferData(34962, new Float32Array(packedModel_33118[0]), 35048);
gl_33146.bindBuffer(34962, null);
gl_33146.viewport(0, 0, gl_33146.canvas.width, gl_33146.canvas.height);
gl_33146.clearColor(bg_33147, 0.0, 0.0, 1.0000000000000000e+000);
gl_33146.clear(16640);
gl_33146.useProgram(program_33140[0]);
gl_33146.bindBuffer(34962, vertices_33119[0]);
gl_33146.vertexAttribPointer(positionAttrib_33141[0], 2, 5126, false, 0, 0);
gl_33146.enableVertexAttribArray(positionAttrib_33141[0]);
gl_33146.drawArrays(1, 0, divInt((model_33148 != null ? model_33148.length : 0), 2));
pluseq__33250(theta_33142, 0, 6.1359231515425647e-003);
L1: do {
F.line = 116;
var i_33289 = 0;
F.line = 3736;
var i_33299 = 0;
L2: do {
F.line = 3737;
L3: while (true) {
if (!(i_33299 < 4)) break L3;
F.line = 3738;
i_33289 = i_33299;
F.line = 117;
var at_33291 = ((theta_33142[0] * 8.0000000000000000e+000) - (addInt(mulInt(i_33289, 4), 1) * 3.1415926535897931e+000));
if ((0.0 < at_33291)) {
F.line = 119;
modelX_33049[0][chckIndx(i_33289, 0, modelX_33049[0].length)-0] = (startX_33033[chckIndx(i_33289, 0, startX_33033.length)-0] + (Math.sin((at_33291 * freqs_33043[chckIndx(i_33289, 0, freqs_33043.length)-0])) / 8.0000000000000000e+000));
}

i_33299 = addInt(i_33299, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function animLoop_33301() {

var F={procname:"ex3.animLoop",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
draw_33144(gl_33071[0]);
F.line = 123;
window.requestAnimationFrame(animLoop_33301);framePtr = F.prev;
}
if (!((gl_33071[0] == null))) {
draw_33144(gl_33071[0]);
animLoop_33301();
}

