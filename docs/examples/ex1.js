/* Generated by the Nim Compiler v0.16.0 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI126 = {size: 0,kind: 37,base: null,node: null,finalizer: null};
var NTI29076 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12409 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3483 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3483.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3483, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI12409 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12409.node = NNI12409;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
var NNI3428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3428.node = NNI3428;
var NNI3426 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3426.node = NNI3426;
NTI3426.base = NTI3424;
NTI3428.base = NTI3426;
NTI29076.base = NTI126;
function makeNimstrLit(c_13403) {

    var ln = c_13403.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13403.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18514, src_18515, ti_18516) {

var result_18829 = null;
switch (ti_18516.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18497(ti_18516))) {
result_18829 = src_18515;
}
else {
result_18829 = [src_18515[0], src_18515[1]];}


break;
case 19:       if (dest_18514 === null || dest_18514 === undefined) {
        dest_18514 = {};
      }
      else {
        for (var key in dest_18514) { delete dest_18514[key]; }
      }
      for (var key in src_18515) { dest_18514[key] = src_18515[key]; }
      result_18829 = dest_18514;
    
break;
case 18: case 17: if (!((ti_18516.base == null))) {
result_18829 = nimCopy(dest_18514, src_18515, ti_18516.base);
}
else {
if ((ti_18516.kind == 17)) {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {m_type: ti_18516} : dest_18514;}
else {
result_18829 = (dest_18514 === null || dest_18514 === undefined) ? {} : dest_18514;}
}
nimCopyAux(result_18829, src_18515, ti_18516.node);

break;
case 24: case 4: case 27: case 16:       if (src_18515 === null) {
        result_18829 = null;
      }
      else {
        if (dest_18514 === null || dest_18514 === undefined) {
          dest_18514 = new Array(src_18515.length);
        }
        else {
          dest_18514.length = src_18515.length;
        }
        result_18829 = dest_18514;
        for (var i = 0; i < src_18515.length; ++i) {
          result_18829[i] = nimCopy(result_18829[i], src_18515[i], ti_18516.base);
        }
      }
    
break;
case 28:       if (src_18515 !== null) {
        result_18829 = src_18515.slice(0);
      }
    
break;
default: 
result_18829 = src_18515;
break;
}
return result_18829;
}
function eqStrings(a_16003, b_16004) {

    if (a_16003 == b_16004) return true;
    if ((!a_16003) || (!b_16004)) return false;
    var alen = a_16003.length;
    if (alen != b_16004.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16003[i] != b_16004[i]) return false;
    return true;
  }
function arrayConstr(len_19003, value_19004, typ_19005) {

      var result = new Array(len_19003);
      for (var i = 0; i < len_19003; ++i) result[i] = nimCopy(null, value_19004, typ_19005);
      return result;
    }
function cstrToNimstr(c_13603) {

  var ln = c_13603.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13603.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_13803) {

    var len = s_13803.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13803[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13803[i] < 128)
        asciiPart[i] = fcc(s_13803[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12806, ename_12807) {

e_12806.name = ename_12807;
if ((excHandler == 0)) {
unhandledException(e_12806);
}

e_12806.trace = nimCopy(null, rawwritestacktrace_12628(), NTI138);
throw e_12806;}
function rawEcho() {

var node_16230 = null;
node_16230 = document.getElementsByTagName('body')[0];if ((node_16230 === null)) {
var e_16242 = null;
e_16242 = {m_type: NTI3428, parent: null, name: null, message: null, trace: null};
e_16242.message = nimCopy(null, makeNimstrLit("<body> element does not exist yet!"), NTI138);
raiseException(e_16242, "IOError");
}

    for (var i = 0; i < arguments.length; ++i) {
      var x = toJSStr(arguments[i]);
      node_16230.appendChild(document.createTextNode(x));
    }
    node_16230.appendChild(document.createElement("br"));
    }
var nimvm_5887 = false;
var nim_program_result = 0;
var globalraisehook_10414 = [null];
var localraisehook_10419 = [null];
var outofmemhook_10422 = [null];
function isfatpointer_18497(ti_18499) {

var result_18500 = false;
BeforeRet: do {
result_18500 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18499.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18500;
}
function nimCopyAux(dest_18519, src_18520, n_18522) {

switch (n_18522.kind) {
case 0: 
break;
case 1:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
    
break;
case 2: L1: do {
var i_18815 = 0;
var HEX3Atmp_18817 = 0;
HEX3Atmp_18817 = (n_18522.len - 1);
var res_18820 = 0;
L2: do {
L3: while (true) {
if (!(res_18820 <= HEX3Atmp_18817)) break L3;
i_18815 = res_18820;
nimCopyAux(dest_18519, src_18520, n_18522.sons[i_18815]);
res_18820 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18519[n_18522.offset] = nimCopy(dest_18519[n_18522.offset], src_18520[n_18522.offset], n_18522.typ);
      for (var i = 0; i < n_18522.sons.length; ++i) {
        nimCopyAux(dest_18519, src_18520, n_18522.sons[i][1]);
      }
    
break;
}
}
function add_10438(x_10441, x_10441_Idx, y_10442) {

        var len = x_10441[0].length-1;
        for (var i = 0; i < y_10442.length; ++i) {
          x_10441[0][len] = y_10442.charCodeAt(i);
          ++len;
        }
        x_10441[0][len] = 0
      }
function auxwritestacktrace_12404(f_12406) {

var Tmp3;
var result_12407 = [null];
var it_12415 = f_12406;
var i_12416 = 0;
var total_12417 = 0;
var tempframes_12421 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12409);
L1: do {
L2: while (true) {
if (!!((it_12415 == null))) Tmp3 = false; else {Tmp3 = (i_12416 <= 63); }if (!Tmp3) break L2;
tempframes_12421[i_12416].Field0 = it_12415.procname;
tempframes_12421[i_12416].Field1 = it_12415.line;
i_12416 += 1;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12415 == null))) break L5;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
result_12407[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12417 == i_12416))) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12407[0] = makeNimstrLit("(");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr(((total_12417 - i_12416))+"")); } else { result_12407[0] = cstrToNimstr(((total_12417 - i_12416))+"");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12407[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_12615 = 0;
var HEX3Atmp_12621 = 0;
HEX3Atmp_12621 = (i_12416 - 1);
var res_12624 = HEX3Atmp_12621;
L7: do {
L8: while (true) {
if (!(0 <= res_12624)) break L8;
j_12615 = res_12624;
add_10438(result_12407, 0, tempframes_12421[j_12615].Field0);
if ((0 < tempframes_12421[j_12615].Field1)) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12407[0] = makeNimstrLit(", line: ");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr((tempframes_12421[j_12615].Field1)+"")); } else { result_12407[0] = cstrToNimstr((tempframes_12421[j_12615].Field1)+"");};
}

if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12407[0] = makeNimstrLit("\x0A");};
res_12624 -= 1;
}
} while(false);
} while(false);
return result_12407[0];
}
function rawwritestacktrace_12628() {

var result_12630 = null;
if (!((framePtr == null))) {
result_12630 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_12404(framePtr)), NTI138);
}
else {
result_12630 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_12630;
}
function unhandledException(e_12654) {

var Tmp1;
var buf_12655 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12654.message, null))) Tmp1 = false; else {Tmp1 = !((e_12654.message[0] == 0)); }if (Tmp1) {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(e_12654.message); } else { buf_12655[0] = e_12654.message;};
}
else {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12655[0] = makeNimstrLit(" [");};
add_10438(buf_12655, 0, e_12654.name);
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12655[0] = makeNimstrLit("]\x0A");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(rawwritestacktrace_12628()); } else { buf_12655[0] = rawwritestacktrace_12628();};
var cbuf_12801 = toJSStr(buf_12655[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_12801);
  }
  else {
    throw cbuf_12801;
  }
  }
function raiseOverflow() {

var e_13236 = null;
e_13236 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13236.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13236, "OverflowError");
}
function raiseDivByZero() {

var e_13252 = null;
e_13252 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_13252.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13252, "DivByZeroError");
}
var vertexpositionattribute_29001 = [0];
var shaderprogram_29048 = [null];
var squareverticesbuffer_29055 = [null];
function getshader_29003(gl_29005, id_29006, kind_29007) {

var result_29008 = null;
var F={procname:"ex1.getShader",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 6;
var shaderscript_29009 = document.getElementById(toJSStr(id_29006));
if ((shaderscript_29009 == null)) {
F.line = 7;
break BeforeRet;
}

F.line = 8;
var thesource_29022 = /**/[makeNimstrLit("")];
F.line = 9;
var currentchild_29023 = shaderscript_29009.firstChild;
L1: do {
F.line = 10;
L2: while (true) {
if (!!((currentchild_29023 == null))) break L2;
if ((currentchild_29023.nodeType == 3)) {
add_10438(thesource_29022, 0, currentchild_29023.nodeValue);
}

F.line = 13;
currentchild_29023 = currentchild_29023.nextSibling;
}
} while(false);
if ((kind_29007 == 102)) {
F.line = 15;
result_29008 = gl_29005.createShader(35632);
}
else {
if ((kind_29007 == 118)) {
F.line = 16;
result_29008 = gl_29005.createShader(35633);
}
else {
F.line = 17;
break BeforeRet;
}
}
gl_29005.shaderSource(result_29008, toJSStr(thesource_29022[0]));
gl_29005.compileShader(result_29008);
F.line = 25;
if (!gl_29005.getShaderParameter(result_29008, gl_29005.COMPILE_STATUS)) {alert('An error occurred compiling the shaders: ' + gl_29005.getShaderInfoLog(result_29008));return null;}; } while (false); 
framePtr = F.prev;
return result_29008;
}
function initshaders_29050(gl_29052) {

var F={procname:"ex1.initShaders",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 29;
var fragmentshader_29053 = getshader_29003(gl_29052, makeNimstrLit("shader-fs"), 102);
F.line = 30;
var vertexshader_29054 = getshader_29003(gl_29052, makeNimstrLit("shader-vs"), 118);
F.line = 33;
shaderprogram_29048[0] = gl_29052.createProgram();
gl_29052.attachShader(shaderprogram_29048[0], vertexshader_29054);
gl_29052.attachShader(shaderprogram_29048[0], fragmentshader_29053);
gl_29052.linkProgram(shaderprogram_29048[0]);
gl_29052.useProgram(shaderprogram_29048[0]);
F.line = 45;
vertexpositionattribute_29001[0] = gl_29052.getAttribLocation(shaderprogram_29048[0], "aVertexPosition");
gl_29052.enableVertexAttribArray(vertexpositionattribute_29001[0]);
framePtr = F.prev;
}
function initbuffers_29057(gl_29059) {

var F={procname:"ex1.initBuffers",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 51;
squareverticesbuffer_29055[0] = gl_29059.createBuffer();
gl_29059.bindBuffer(34962, squareverticesbuffer_29055[0]);
F.line = 55;
var vertices_29078 = nimCopy(null, [1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, 1.0000000000000000e+000, -1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, -1.0000000000000000e+000, 0.0], NTI29076);
gl_29059.bufferData(34962, new Float32Array(vertices_29078), 35044);
framePtr = F.prev;
}
function newseq_29103(len_29107) {

var result_29109 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
result_29109 = new Array(len_29107); for (var i=0;i<len_29107;++i) {result_29109[i]=0.0;}framePtr = F.prev;
return result_29109;
}
function perspective4_29142(a_29150, b_29152, c_29154, d_29156, e_29158) {

var F={procname:"perspective4.perspective4",prev:framePtr,filename:"C:\\Dev\\proj\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 473;
function frustum(a,b,c,d,e,g,f){var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f;};a_29150=c_29154*Math.tan(a_29150*Math.PI/360);b_29152=a_29150*b_29152;result_29159 = frustum(-b_29152,b_29152,-a_29150,a_29150,c_29154,d_29156,e_29158);framePtr = F.prev;
}
function identity4_29191(a_29195) {

var F={procname:"identity4.identity4",prev:framePtr,filename:"C:\\Dev\\proj\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 465;
a_29195[0]=1;a_29195[1]=0;a_29195[2]=0;a_29195[3]=0;a_29195[4]=0;a_29195[5]=1;a_29195[6]=0;a_29195[7]=0;a_29195[8]=0;a_29195[9]=0;a_29195[10]=1;a_29195[11]=0;a_29195[12]=0;a_29195[13]=0;a_29195[14]=0;a_29195[15]=1;result_29196=a_29195framePtr = F.prev;
}
function traslate4_29203(a_29209, b_29211, c_29213) {

var F={procname:"traslate4.traslate4",prev:framePtr,filename:"C:\\Dev\\proj\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 469;
var d=b_29211[0],e=b_29211[1];b_29211=b_29211[2];if(!c_29213||a_29209==c_29213){a_29209[12]=a_29209[0]*d+a_29209[4]*e+a_29209[8]*b_29211+a_29209[12];a_29209[13]=a_29209[1]*d+a_29209[5]*e+a_29209[9]*b_29211+a_29209[13];a_29209[14]=a_29209[2]*d+a_29209[6]*e+a_29209[10]*b_29211+a_29209[14];a_29209[15]=a_29209[3]*d+a_29209[7]*e+a_29209[11]*b_29211+a_29209[15];return a_29209}var g=a_29209[0],f=a_29209[1],h=a_29209[2],i=a_29209[3],j=a_29209[4],k=a_29209[5],l=a_29209[6],o=a_29209[7],m=a_29209[8],n=a_29209[9],p=a_29209[10],r=a_29209[11];c_29213[0]=g;c_29213[1]=f;c_29213[2]=h;c_29213[3]=i;c_29213[4]=j;c_29213[5]=k;c_29213[6]=l;c_29213[7]=o;c_29213[8]=m;c_29213[9]=n;c_29213[10]=p;c_29213[11]=r;c_29213[12]=g*d+j*e+m*b_29211+a_29209[12];c_29213[13]=f*d+k*e+n*b_29211+a_29209[13];c_29213[14]=h*d+l*e+p*b_29211+a_29209[14];c_29213[15]=i*d+o*e+r*b_29211+a_29209[15];result_29214 = c_29213;framePtr = F.prev;
}
function setmatrixuniforms_29080(gl_29082, pm_29084, mv_29085) {

var F={procname:"ex1.setMatrixUniforms",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
F.line = 66;
var puniform_29086 = gl_29082.getUniformLocation(shaderprogram_29048[0], "uPMatrix");
gl_29082.uniformMatrix4fv(puniform_29086, false, new Float32Array(pm_29084));
F.line = 69;
var mvuniform_29087 = gl_29082.getUniformLocation(shaderprogram_29048[0], "uMVMatrix");
gl_29082.uniformMatrix4fv(mvuniform_29087, false, new Float32Array(mv_29085));
framePtr = F.prev;
}
function drawscene_29088(gl_29090) {

var F={procname:"ex1.drawScene",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
gl_29090.clear(16640);
F.line = 75;
var perspectivematrix_29138 = newseq_29103(16);
perspective4_29142(45, 1.3333333333333333e+000, 1.0000000000000001e-001, 1.0000000000000000e+002, perspectivematrix_29138);
F.line = 79;
var mv_29189 = newseq_29103(16);
identity4_29191(mv_29189);
traslate4_29203(mv_29189, [0.0, 0.0, -6.0000000000000000e+000], mv_29189);
gl_29090.bindBuffer(34962, squareverticesbuffer_29055[0]);
gl_29090.vertexAttribPointer(vertexpositionattribute_29001[0], 3, 5126, false, 0, 0);
setmatrixuniforms_29080(gl_29090, perspectivematrix_29138, mv_29189);
gl_29090.drawArrays(5, 0, 4);
framePtr = F.prev;
}
function HEX3Aanonymous_29216(e_29219) {

var F={procname:"ex1.:anonymous",prev:framePtr,filename:"ex1.nim",line:0};
framePtr = F;
rawEcho(makeNimstrLit("4"));
rawEcho(makeNimstrLit("4"));
rawEcho(makeNimstrLit("4"));
F.line = 93;
var canvas_29229 = document.getElementById("glcanvas");
F.line = 94;
var gl_29230 = canvas_29229.getContext("webgl");
gl_29230.clearColor(0.0, 0.0, 0.0, 1.0000000000000000e+000);
gl_29230.clearDepth(1.0000000000000000e+000);
gl_29230.enable(2929);
initshaders_29050(gl_29230);
initbuffers_29057(gl_29230);
drawscene_29088(gl_29230);
framePtr = F.prev;
}
window.onload = HEX3Aanonymous_29216;
