/* Generated by the Nim Compiler v0.16.1 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI29260 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI29218 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12809 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3485 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3485.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3485, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI12809 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12809.node = NNI12809;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
NTI29218.base = NTI128;
NTI29260.base = NTI128;
function makeNimstrLit(c_13803) {

    var ln = c_13803.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13803.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_19018, src_19019, ti_19020) {

var result_19429 = null;
switch (ti_19020.kind) {
case 21: case 22: case 23: case 5: if (!(isFatPointer_19001(ti_19020))) {
result_19429 = src_19019;
}
else {
result_19429 = [src_19019[0], src_19019[1]];}


break;
case 19:       if (dest_19018 === null || dest_19018 === undefined) {
        dest_19018 = {};
      }
      else {
        for (var key in dest_19018) { delete dest_19018[key]; }
      }
      for (var key in src_19019) { dest_19018[key] = src_19019[key]; }
      result_19429 = dest_19018;
    
break;
case 18: case 17: if (!((ti_19020.base == null))) {
result_19429 = nimCopy(dest_19018, src_19019, ti_19020.base);
}
else {
if ((ti_19020.kind == 17)) {
result_19429 = (dest_19018 === null || dest_19018 === undefined) ? {m_type: ti_19020} : dest_19018;}
else {
result_19429 = (dest_19018 === null || dest_19018 === undefined) ? {} : dest_19018;}
}
nimCopyAux(result_19429, src_19019, ti_19020.node);

break;
case 24: case 4: case 27: case 16:       if (src_19019 === null) {
        result_19429 = null;
      }
      else {
        if (dest_19018 === null || dest_19018 === undefined) {
          dest_19018 = new Array(src_19019.length);
        }
        else {
          dest_19018.length = src_19019.length;
        }
        result_19429 = dest_19018;
        for (var i = 0; i < src_19019.length; ++i) {
          result_19429[i] = nimCopy(result_19429[i], src_19019[i], ti_19020.base);
        }
      }
    
break;
case 28:       if (src_19019 !== null) {
        result_19429 = src_19019.slice(0);
      }
    
break;
default: 
result_19429 = src_19019;
break;
}
return result_19429;
}
function eqStrings(a_16403, b_16404) {

    if (a_16403 == b_16404) return true;
    if ((!a_16403) || (!b_16404)) return false;
    var alen = a_16403.length;
    if (alen != b_16404.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16403[i] != b_16404[i]) return false;
    return true;
  }
function arrayConstr(len_19603, value_19604, typ_19605) {

      var result = new Array(len_19603);
      for (var i = 0; i < len_19603; ++i) result[i] = nimCopy(null, value_19604, typ_19605);
      return result;
    }
function cstrToNimstr(c_14003) {

  var ln = c_14003.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14003.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_14203) {

    var len = s_14203.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_14203[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_14203[i] < 128)
        asciiPart[i] = fcc(s_14203[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_13206, ename_13207) {

e_13206.name = ename_13207;
if ((excHandler == 0)) {
unhandledException(e_13206);
}

e_13206.trace = nimCopy(null, rawWriteStackTrace_13028(), NTI138);
throw e_13206;}
var nimvm_5887 = false;
var nim_program_result = 0;
var globalRaiseHook_10805 = [null];
var localRaiseHook_10810 = [null];
var outOfMemHook_10813 = [null];
function isFatPointer_19001(ti_19003) {

var result_19004 = false;
BeforeRet: do {
result_19004 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_19003.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_19004;
}
function nimCopyAux(dest_19023, src_19024, n_19026) {

switch (n_19026.kind) {
case 0: 
break;
case 1:       dest_19023[n_19026.offset] = nimCopy(dest_19023[n_19026.offset], src_19024[n_19026.offset], n_19026.typ);
    
break;
case 2: L1: do {
var i_19415 = 0;
var colontmp__19417 = 0;
colontmp__19417 = (n_19026.len - 1);
var res_19420 = 0;
L2: do {
L3: while (true) {
if (!(res_19420 <= colontmp__19417)) break L3;
i_19415 = res_19420;
nimCopyAux(dest_19023, src_19024, n_19026.sons[i_19415]);
res_19420 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_19023[n_19026.offset] = nimCopy(dest_19023[n_19026.offset], src_19024[n_19026.offset], n_19026.typ);
      for (var i = 0; i < n_19026.sons.length; ++i) {
        nimCopyAux(dest_19023, src_19024, n_19026.sons[i][1]);
      }
    
break;
}
}
function add_10829(x_10832, x_10832_Idx, y_10833) {

        var len = x_10832[0].length-1;
        for (var i = 0; i < y_10833.length; ++i) {
          x_10832[0][len] = y_10833.charCodeAt(i);
          ++len;
        }
        x_10832[0][len] = 0
      }
function auxWriteStackTrace_12804(f_12806) {

var Tmp3;
var result_12807 = [null];
var it_12815 = f_12806;
var i_12816 = 0;
var total_12817 = 0;
var tempFrames_12821 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12809);
L1: do {
L2: while (true) {
if (!!((it_12815 == null))) Tmp3 = false; else {Tmp3 = (i_12816 <= 63); }if (!Tmp3) break L2;
tempFrames_12821[i_12816].Field0 = it_12815.procname;
tempFrames_12821[i_12816].Field1 = it_12815.line;
i_12816 += 1;
total_12817 += 1;
it_12815 = it_12815.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12815 == null))) break L5;
total_12817 += 1;
it_12815 = it_12815.prev;
}
} while(false);
result_12807[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12817 == i_12816))) {
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12807[0] = makeNimstrLit("(");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(cstrToNimstr(((total_12817 - i_12816))+"")); } else { result_12807[0] = cstrToNimstr(((total_12817 - i_12816))+"");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12807[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_13015 = 0;
var colontmp__13021 = 0;
colontmp__13021 = (i_12816 - 1);
var res_13024 = colontmp__13021;
L7: do {
L8: while (true) {
if (!(0 <= res_13024)) break L8;
j_13015 = res_13024;
add_10829(result_12807, 0, tempFrames_12821[j_13015].Field0);
if ((0 < tempFrames_12821[j_13015].Field1)) {
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12807[0] = makeNimstrLit(", line: ");};
if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_12821[j_13015].Field1)+"")); } else { result_12807[0] = cstrToNimstr((tempFrames_12821[j_13015].Field1)+"");};
}

if (result_12807[0] != null) { result_12807[0] = (result_12807[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12807[0] = makeNimstrLit("\x0A");};
res_13024 -= 1;
}
} while(false);
} while(false);
return result_12807[0];
}
function rawWriteStackTrace_13028() {

var result_13030 = null;
if (!((framePtr == null))) {
result_13030 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_12804(framePtr)), NTI138);
}
else {
result_13030 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_13030;
}
function unhandledException(e_13054) {

var Tmp1;
var buf_13055 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_13054.message, null))) Tmp1 = false; else {Tmp1 = !((e_13054.message[0] == 0)); }if (Tmp1) {
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13055[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(e_13054.message); } else { buf_13055[0] = e_13054.message;};
}
else {
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13055[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13055[0] = makeNimstrLit(" [");};
add_10829(buf_13055, 0, e_13054.name);
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13055[0] = makeNimstrLit("]\x0A");};
if (buf_13055[0] != null) { buf_13055[0] = (buf_13055[0].slice(0, -1)).concat(rawWriteStackTrace_13028()); } else { buf_13055[0] = rawWriteStackTrace_13028();};
var cbuf_13201 = toJSStr(buf_13055[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_13201);
  }
  else {
    throw cbuf_13201;
  }
  }
function raiseOverflow() {

var e_13641 = null;
e_13641 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null};
e_13641.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
e_13641.parent = null;
raiseException(e_13641, "OverflowError");
}
function raiseDivByZero() {

var e_13659 = null;
e_13659 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13659.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
e_13659.parent = null;
raiseException(e_13659, "DivByZeroError");
}
var gl_29001 = [null];
var viewportWidth_29003 = [0];
var viewportHeight_29005 = [0];
var shaderProgram_29096 = [null];
var vertexPositionAttribute_29098 = [0];
var pMatrixUniform_29100 = [null];
var mvMatrixUniform_29102 = [null];
function newSeq_29121(len_29125) {

var result_29127 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
result_29127 = new Array(len_29125); for (var i=0;i<len_29125;++i) {result_29127[i]=0.0;}framePtr = F.prev;
return result_29127;
}
var mvMatrix_29146 = /**/[newSeq_29121(16)];
var pMatrix_29175 = /**/[newSeq_29121(16)];
var triangleVertexPositionBuffer_29178 = [null];
var squareVertexPositionBuffer_29180 = [null];
var tin_29185 = [{Field0: 0, Field1: 0}];
var vin_29190 = [{Field0: 0, Field1: 0}];
function initGL_29046(canvas_29048) {

var F={procname:"ex2.initGL",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 20;
gl_29001[0] = canvas_29048.getContext("webgl");
if ((gl_29001[0] === null)) {
F.line = 21;
gl_29001[0] = canvas_29048.getContext("experimental-webgl");
}

F.line = 22;
viewportWidth_29003[0] = canvas_29048.width;
F.line = 23;
viewportHeight_29005[0] = canvas_29048.height;
framePtr = F.prev;
}
function getShader_29057(gl_29059, id_29060, stype_29061) {

var result_29062 = null;
var F={procname:"ex2.getShader",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 29;
var shaderScript_29063 = document.getElementById(id_29060);
if ((shaderScript_29063 == null)) {
F.line = 31;
break BeforeRet;
}

F.line = 33;
var str_29076 = shaderScript_29063.firstChild.nodeValue;
if ((stype_29061 == "x-shader/x-fragment")) {
F.line = 42;
result_29062 = gl_29059.createShader(35632);
}
else {
if ((stype_29061 == "x-shader/x-vertex")) {
F.line = 44;
result_29062 = gl_29059.createShader(35633);
}
else {
F.line = 46;
break BeforeRet;
}
}
gl_29059.shaderSource(result_29062, str_29076);
gl_29059.compileShader(result_29062);
F.line = 51;
if (!gl_29059.getShaderParameter(result_29062, gl_29059.COMPILE_STATUS)){alert(stype_29061+' '+gl_29059.getShaderInfoLog(result_29062));return null;};} while (false); 
framePtr = F.prev;
return result_29062;
}
function initShaders_29104() {

var F={procname:"ex2.initShaders",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 59;
var fragmentShader_29106 = getShader_29057(gl_29001[0], "shader-fs", "x-shader/x-fragment");
F.line = 60;
var vertexShader_29107 = getShader_29057(gl_29001[0], "shader-vs", "x-shader/x-vertex");
F.line = 62;
shaderProgram_29096[0] = gl_29001[0].createProgram();
gl_29001[0].attachShader(shaderProgram_29096[0], vertexShader_29107);
gl_29001[0].attachShader(shaderProgram_29096[0], fragmentShader_29106);
gl_29001[0].linkProgram(shaderProgram_29096[0]);
gl_29001[0].useProgram(shaderProgram_29096[0]);
F.line = 69;
vertexPositionAttribute_29098[0] = gl_29001[0].getAttribLocation(shaderProgram_29096[0], "aVertexPosition");
gl_29001[0].enableVertexAttribArray(vertexPositionAttribute_29098[0]);
F.line = 71;
pMatrixUniform_29100[0] = gl_29001[0].getUniformLocation(shaderProgram_29096[0], "uPMatrix");
F.line = 72;
mvMatrixUniform_29102[0] = gl_29001[0].getUniformLocation(shaderProgram_29096[0], "uMVMatrix");
framePtr = F.prev;
}
function initBuffers_29192() {

var F={procname:"ex2.initBuffers",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 89;
triangleVertexPositionBuffer_29178[0] = gl_29001[0].createBuffer();
gl_29001[0].bindBuffer(34962, triangleVertexPositionBuffer_29178[0]);
F.line = 91;
var vertices_29220 = nimCopy(null, [0.0, 1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, -1.0000000000000000e+000, 0.0, 1.0000000000000000e+000, -1.0000000000000000e+000, 0.0], NTI29218);
gl_29001[0].bufferData(34962, new Float32Array(vertices_29220), 35044);
F.line = 97;
tin_29185[0].Field0 = 3;
F.line = 98;
tin_29185[0].Field1 = 3;
F.line = 100;
squareVertexPositionBuffer_29180[0] = gl_29001[0].createBuffer();
gl_29001[0].bindBuffer(34962, squareVertexPositionBuffer_29180[0]);
F.line = 102;
var vertices2_29262 = nimCopy(null, [1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, 1.0000000000000000e+000, 0.0, 1.0000000000000000e+000, -1.0000000000000000e+000, 0.0, -1.0000000000000000e+000, -1.0000000000000000e+000, 0.0], NTI29260);
gl_29001[0].bufferData(34962, new Float32Array(vertices2_29262), 35044);
F.line = 109;
vin_29190[0].Field0 = 3;
F.line = 110;
vin_29190[0].Field1 = 4;
framePtr = F.prev;
}
function perspective4_29298(a_29306, b_29308, c_29310, d_29312, e_29314) {

var F={procname:"perspective4.perspective4",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 14;
function frustum(a,b,c,d,e,g,f){var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f;};a_29306=c_29310*Math.tan(a_29306*Math.PI/360);b_29308=a_29306*b_29308;result_29315 = frustum(-b_29308,b_29308,-a_29306,a_29306,c_29310,d_29312,e_29314);framePtr = F.prev;
}
function slash__20807(x_20809, y_20810) {

var result_20811 = 0.0;
var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
framePtr = F;
F.line = 3289;
result_20811 = (x_20809 / y_20810);
framePtr = F.prev;
return result_20811;
}
function identity4_29318(a_29322) {

var F={procname:"identity4.identity4",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 9;
a_29322[0]=1;a_29322[1]=0;a_29322[2]=0;a_29322[3]=0;a_29322[4]=0;a_29322[5]=1;a_29322[6]=0;a_29322[7]=0;a_29322[8]=0;a_29322[9]=0;a_29322[10]=1;a_29322[11]=0;a_29322[12]=0;a_29322[13]=0;a_29322[14]=0;a_29322[15]=1;result_29323=a_29322framePtr = F.prev;
}
function traslate4_29341(a_29347, b_29349, c_29351) {

var F={procname:"traslate4.traslate4",prev:framePtr,filename:"C:\\Users\\stisa\\OneDrive\\Progetti\\webgl\\src\\webgl.nim",line:0};
framePtr = F;
F.line = 479;
var d=b_29349[0],e=b_29349[1];b_29349=b_29349[2];if(!c_29351||a_29347==c_29351){a_29347[12]=a_29347[0]*d+a_29347[4]*e+a_29347[8]*b_29349+a_29347[12];a_29347[13]=a_29347[1]*d+a_29347[5]*e+a_29347[9]*b_29349+a_29347[13];a_29347[14]=a_29347[2]*d+a_29347[6]*e+a_29347[10]*b_29349+a_29347[14];a_29347[15]=a_29347[3]*d+a_29347[7]*e+a_29347[11]*b_29349+a_29347[15];return a_29347}var g=a_29347[0],f=a_29347[1],h=a_29347[2],i=a_29347[3],j=a_29347[4],k=a_29347[5],l=a_29347[6],o=a_29347[7],m=a_29347[8],n=a_29347[9],p=a_29347[10],r=a_29347[11];c_29351[0]=g;c_29351[1]=f;c_29351[2]=h;c_29351[3]=i;c_29351[4]=j;c_29351[5]=k;c_29351[6]=l;c_29351[7]=o;c_29351[8]=m;c_29351[9]=n;c_29351[10]=p;c_29351[11]=r;c_29351[12]=g*d+j*e+m*b_29349+a_29347[12];c_29351[13]=f*d+k*e+n*b_29349+a_29347[13];c_29351[14]=h*d+l*e+p*b_29349+a_29347[14];c_29351[15]=i*d+o*e+r*b_29349+a_29347[15];result_29352 = c_29351;framePtr = F.prev;
}
function setMatrixUniforms_29176() {

var F={procname:"ex2.setMatrixUniforms",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
gl_29001[0].uniformMatrix4fv(pMatrixUniform_29100[0], false, new Float32Array(pMatrix_29175[0]));
gl_29001[0].uniformMatrix4fv(mvMatrixUniform_29102[0], false, new Float32Array(mvMatrix_29146[0]));
framePtr = F.prev;
}
function drawScene_29277() {

var F={procname:"ex2.drawScene",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
gl_29001[0].viewport(0, 0, viewportWidth_29003[0], viewportHeight_29005[0]);
gl_29001[0].clear(16640);
perspective4_29298(45, slash__20807(viewportWidth_29003[0], viewportHeight_29005[0]), 1.0000000000000001e-001, 1.0000000000000000e+002, pMatrix_29175[0]);
identity4_29318(mvMatrix_29146[0]);
traslate4_29341(mvMatrix_29146[0], [-1.5000000000000000e+000, 0.0, -7.0000000000000000e+000], mvMatrix_29146[0]);
gl_29001[0].bindBuffer(34962, triangleVertexPositionBuffer_29178[0]);
gl_29001[0].vertexAttribPointer(vertexPositionAttribute_29098[0], tin_29185[0].Field0, 5126, false, 0, 0);
setMatrixUniforms_29176();
gl_29001[0].drawArrays(4, 0, tin_29185[0].Field1);
traslate4_29341(mvMatrix_29146[0], [3.0000000000000000e+000, 0.0, 0.0], mvMatrix_29146[0]);
gl_29001[0].bindBuffer(34962, squareVertexPositionBuffer_29180[0]);
gl_29001[0].vertexAttribPointer(vertexPositionAttribute_29098[0], vin_29190[0].Field0, 5126, false, 0, 0);
setMatrixUniforms_29176();
gl_29001[0].drawArrays(5, 0, vin_29190[0].Field1);
framePtr = F.prev;
}
function colonanonymous__29460(e_29463) {

var F={procname:"ex2.:anonymous",prev:framePtr,filename:"ex2.nim",line:0};
framePtr = F;
F.line = 140;
var canvas_29464 = document.getElementById("glcanvas");
initGL_29046(canvas_29464);
initShaders_29104();
initBuffers_29192();
gl_29001[0].clearColor(0.0, 0.0, 0.0, 1.0000000000000000e+000);
drawScene_29277();
framePtr = F.prev;
}
window.onload = colonanonymous__29460;
