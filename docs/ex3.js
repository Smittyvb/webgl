/* Generated by the Nim Compiler v0.14.2 */
/*   (c) 2016 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI128 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI31041 = {size: 0,kind: 4,base: null,node: null,finalizer: null};
var NTI3252 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI31036 = {size: 0,kind: 4,base: null,node: null,finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI31031 = {size: 0,kind: 4,base: null,node: null,finalizer: null};
var NTI31019 = {size: 0,kind: 4,base: null,node: null,finalizer: null};
var NTI3238 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11677 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3285 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3224 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3236 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3240 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3240 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3240.node = NNI3240;
var NNI3236 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3236.node = NNI3236;
NTI3285.base = NTI3224;
var NNI3224 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3285, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3224.node = NNI3224;
var NNI3208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3208.node = NNI3208;
NTI3224.base = NTI3208;
NTI3236.base = NTI3224;
NTI3240.base = NTI3236;
var NNI11677 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI11677.node = NNI11677;
var NNI3238 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3238.node = NNI3238;
NTI3238.base = NTI3236;
NTI31019.base = NTI104;
NTI31031.base = NTI124;
NTI31036.base = NTI124;
var NNI3252 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3252.node = NNI3252;
NTI3252.base = NTI3224;
NTI31041.base = NTI128;
function makeNimstrLit(c_13003) {

    var ln = c_13003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function arrayConstr(len_18603, value_18604, typ_18605) {

      var result = new Array(len_18603);
      for (var i = 0; i < len_18603; ++i) result[i] = nimCopy(null, value_18604, typ_18605);
      return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18115, src_18116, ti_18117) {

var result_18429 = null;
switch (ti_18117.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18098(ti_18117))) {
result_18429 = src_18116;
}
else {
result_18429 = [src_18116[0], src_18116[1]];}


break;
case 19:       if (dest_18115 === null || dest_18115 === undefined) {
        dest_18115 = {};
      }
      else {
        for (var key in dest_18115) { delete dest_18115[key]; }
      }
      for (var key in src_18116) { dest_18115[key] = src_18116[key]; }
      result_18429 = dest_18115;
    
break;
case 18: case 17: if (!((ti_18117.base == null))) {
result_18429 = nimCopy(dest_18115, src_18116, ti_18117.base);
}
else {
if ((ti_18117.kind == 17)) {
result_18429 = (dest_18115 === null || dest_18115 === undefined) ? {m_type: ti_18117} : dest_18115;}
else {
result_18429 = (dest_18115 === null || dest_18115 === undefined) ? {} : dest_18115;}
}
nimCopyAux(result_18429, src_18116, ti_18117.node);

break;
case 24: case 4: case 27: case 16:       if (src_18116 === null) {
        result_18429 = null;
      }
      else {
        if (dest_18115 === null || dest_18115 === undefined) {
          dest_18115 = new Array(src_18116.length);
        }
        else {
          dest_18115.length = src_18116.length;
        }
        result_18429 = dest_18115;
        for (var i = 0; i < src_18116.length; ++i) {
          result_18429[i] = nimCopy(result_18429[i], src_18116[i], ti_18117.base);
        }
      }
    
break;
case 28:       if (src_18116 !== null) {
        result_18429 = src_18116.slice(0);
      }
    
break;
default: 
result_18429 = src_18116;
break;
}
return result_18429;
}
function cstrToNimstr(c_13203) {

  var ln = c_13203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function raiseException(e_12005, ename_12006) {

e_12005.name = ename_12006;
if ((excHandler == 0)) {
unhandledException(e_12005);
}

throw e_12005;}
var startx_31030 = nimCopy(null, [-7.5000000000000000e-001, 7.5000000000000000e-001, -7.5000000000000000e-001, 7.5000000000000000e-001], NTI31031);
var starty_31035 = nimCopy(null, [-7.5000000000000000e-001, -7.5000000000000000e-001, 7.5000000000000000e-001, 7.5000000000000000e-001], NTI31036);
function toJSStr(s_13403) {

    var len = s_13403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13403[i] < 128)
        asciiPart[i] = fcc(s_13403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function addInt(a_15856, b_15857) {

      var result = a_15856 + b_15857;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mulInt(a_16203, b_16204) {

      var result = a_16203 * b_16204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function chckIndx(i_18609, a_18610, b_18611) {

var Tmp1;
var result_18612 = 0;
BeforeRet: do {
if (!(a_18610 <= i_18609)) Tmp1 = false; else {Tmp1 = (i_18609 <= b_18611); }if (Tmp1) {
result_18612 = i_18609;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_18612;
}
var freqs_31040 = nimCopy(null, [1.0000000000000000e+000, 1.1892071150027210e+000, 1.2599210498948732e+000, 1.4142135623730951e+000], NTI31041);
var nimvm_5354 = false;
var nim_program_result = 0;
var globalraisehook_9813 = [null];
var localraisehook_9818 = [null];
var outofmemhook_9821 = [null];
function isfatpointer_18098(ti_18100) {

var result_18101 = false;
BeforeRet: do {
result_18101 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18100.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18101;
}
function nimCopyAux(dest_18120, src_18121, n_18123) {

switch (n_18123.kind) {
case 0: 
break;
case 1:       dest_18120[n_18123.offset] = nimCopy(dest_18120[n_18123.offset], src_18121[n_18123.offset], n_18123.typ);
    
break;
case 2: L1: do {
var i_18415 = 0;
var HEX3Atmp_18417 = 0;
HEX3Atmp_18417 = (n_18123.len - 1);
var res_18420 = 0;
L2: do {
L3: while (true) {
if (!(res_18420 <= HEX3Atmp_18417)) break L3;
i_18415 = res_18420;
nimCopyAux(dest_18120, src_18121, n_18123.sons[i_18415]);
res_18420 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18120[n_18123.offset] = nimCopy(dest_18120[n_18123.offset], src_18121[n_18123.offset], n_18123.typ);
      for (var i = 0; i < n_18123.sons.length; ++i) {
        nimCopyAux(dest_18120, src_18121, n_18123.sons[i][1]);
      }
    
break;
}
}
function add_9837(x_9840, x_9840_Idx, y_9841) {

var F={procname:"system.add",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
        var len = x_9840[0].length-1;
        for (var i = 0; i < y_9841.length; ++i) {
          x_9840[0][len] = y_9841.charCodeAt(i);
          ++len;
        }
        x_9840[0][len] = 0
      framePtr = framePtr.prev;
}
function auxwritestacktrace_11672(f_11674) {

var Tmp3;
var result_11675 = [null];
var it_11683 = f_11674;
var i_11684 = 0;
var total_11685 = 0;
var tempframes_11689 = arrayConstr(64, {Field0: null, Field1: 0}, NTI11677);
L1: do {
L2: while (true) {
if (!!((it_11683 == null))) Tmp3 = false; else {Tmp3 = (i_11684 <= 63); }if (!Tmp3) break L2;
tempframes_11689[i_11684].Field0 = it_11683.procname;
tempframes_11689[i_11684].Field1 = it_11683.line;
i_11684 += 1;
total_11685 += 1;
it_11683 = it_11683.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_11683 == null))) break L5;
total_11685 += 1;
it_11683 = it_11683.prev;
}
} while(false);
result_11675[0] = makeNimstrLit("");
if (!((total_11685 == i_11684))) {
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_11675[0] = makeNimstrLit("(");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(cstrToNimstr(((total_11685 - i_11684))+"")); } else { result_11675[0] = cstrToNimstr(((total_11685 - i_11684))+"");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_11675[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_11815 = 0;
var HEX3Atmp_11821 = 0;
HEX3Atmp_11821 = (i_11684 - 1);
var res_11824 = HEX3Atmp_11821;
L7: do {
L8: while (true) {
if (!(0 <= res_11824)) break L8;
j_11815 = res_11824;
add_9837(result_11675, 0, tempframes_11689[j_11815].Field0);
if ((0 < tempframes_11689[j_11815].Field1)) {
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_11675[0] = makeNimstrLit(", line: ");};
if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(cstrToNimstr((tempframes_11689[j_11815].Field1)+"")); } else { result_11675[0] = cstrToNimstr((tempframes_11689[j_11815].Field1)+"");};
}

if (result_11675[0] != null) { result_11675[0] = (result_11675[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_11675[0] = makeNimstrLit("\x0A");};
res_11824 -= 1;
}
} while(false);
} while(false);
return result_11675[0];
}
function rawwritestacktrace_11828() {

var result_11830 = null;
if (!((framePtr == null))) {
result_11830 = (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_11672(framePtr));
framePtr = null;
}
else {
if (!((lastJSError == null))) {
result_11830 = cstrToNimstr(lastJSError.stack);
}
else {
result_11830 = makeNimstrLit("No stack traceback available\x0A");
}
}
return result_11830;
}
function unhandledException(e_11861) {

var buf_12001 = rawwritestacktrace_11828();
}
function raiseOverflow() {

var e_12810 = null;
e_12810 = {m_type: NTI3240, parent: null, name: null, message: null, trace: null};
e_12810.message = makeNimstrLit("over- or underflow");
raiseException(e_12810, "OverflowError");
}
function raiseDivByZero() {

var e_12826 = null;
e_12826 = {m_type: NTI3238, parent: null, name: null, message: null, trace: null};
e_12826.message = makeNimstrLit("division by zero");
raiseException(e_12826, "DivByZeroError");
}
var x_31021 = nimCopy(null, [1, 2, 3], NTI31019);
var y_31022 = /**/[nimCopy(null, x_31021, NTI31019)];
var z_31023 = /**/[nimCopy(null, x_31021, NTI31019)];
y_31022[0][0] = 10;
function consolelog_31025(s_31029) {

var F={procname:"consolelog.consolelog",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 4;
console.log(s_31029);framePtr = framePtr.prev;
}
consolelog_31025(cstrToNimstr((z_31023[0][0])+""));
var modelx_31046 = /**/[nimCopy(null, startx_31030, NTI31031)];
var modely_31047 = /**/[nimCopy(null, starty_31035, NTI31036)];
var vertexshadercode_31065 = makeNimstrLit("attribute vec2 position;\x0Avoid main(void) {\x0A    gl_Position = vec4(position, 0.0, 1.0);\x0A}\x0A");
var fragmentshadercode_31066 = makeNimstrLit("void main(void) {\x0A    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\x0A}\x0A");
var canv_31067 = /**/[document.getElementById("canvas")];
function getcontextwebgl_26755(c_26757) {

var result_26758 = null;
var F={procname:"webgl.getContextWebGL",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 228;
result_26758 = c_26757.getContext('webgl') || c_26757.getContext('experimental-webgl');framePtr = framePtr.prev;
return result_26758;
}
function initwebgl_31006(canvas_31009) {

var result_31010 = null;
var F={procname:"ex3.initWebGL",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 6;
result_31010 = getcontextwebgl_26755(canvas_31009);
framePtr = framePtr.prev;
return result_31010;
}
var gl_31068 = /**/[initwebgl_31006(canv_31067[0])];
function f32a_26903(s_26906) {

var result_26907 = null;
var F={procname:"webgl.f32A",prev:framePtr,filename:"c:\\users\\silvio\\.nimble\\pkgs\\webgl-0.1.0\\webgl.nim",line:0};
framePtr = F;
F.line = 285;
result_26907 = new Float32Array(s_26906);framePtr = framePtr.prev;
return result_26907;
}
function newseq_31072(len_31076) {

var result_31078 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
result_31078 = new Array(len_31076); for (var i=0;i<len_31076;++i) {result_31078[i]=0.0;}framePtr = framePtr.prev;
return result_31078;
}
function makemodel_31048() {

var result_31051 = null;
var F={procname:"ex3.makeModel",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 33;
result_31051 = [modelx_31046[0][0], modely_31047[0][0], modelx_31046[0][1], modely_31047[0][1], modelx_31046[0][0], modely_31047[0][0], modelx_31046[0][2], modely_31047[0][2], modelx_31046[0][0], modely_31047[0][0], modelx_31046[0][3], modely_31047[0][3], modelx_31046[0][1], modely_31047[0][1], modelx_31046[0][3], modely_31047[0][3], modelx_31046[0][2], modely_31047[0][2], modelx_31046[0][1], modely_31047[0][1], modelx_31046[0][2], modely_31047[0][2], modelx_31046[0][3], modely_31047[0][3]];
break BeforeRet;
} while (false); 
framePtr = framePtr.prev;
return result_31051;
}
var packedmodel_31115 = /**/[f32a_26903(newseq_31072((makemodel_31048() != null ? makemodel_31048().length : 0)))];
var vertices_31116 = /**/[gl_31068[0].createBuffer()];
var vertexshader_31117 = /**/[gl_31068[0].createShader(35633)];
gl_31068[0].shaderSource(vertexshader_31117[0], toJSStr(vertexshadercode_31065));
gl_31068[0].compileShader(vertexshader_31117[0]);
function checkshader_31011(gl_31013, shader_31014) {

var F={procname:"ex3.checkShader",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 9;
if (!gl_31013.getShaderParameter(shader_31014, gl_31013.COMPILE_STATUS)) {console.error(gl_31013.getShaderInfoLog(shader_31014));}; framePtr = framePtr.prev;
}
checkshader_31011(gl_31068[0], vertexshader_31117[0]);
var fragmentshader_31118 = /**/[gl_31068[0].createShader(35632)];
gl_31068[0].shaderSource(fragmentshader_31118[0], toJSStr(fragmentshadercode_31066));
gl_31068[0].compileShader(fragmentshader_31118[0]);
checkshader_31011(gl_31068[0], fragmentshader_31118[0]);
var program_31119 = /**/[gl_31068[0].createProgram()];
gl_31068[0].attachShader(program_31119[0], vertexshader_31117[0]);
gl_31068[0].attachShader(program_31119[0], fragmentshader_31118[0]);
gl_31068[0].linkProgram(program_31119[0]);
function checkprogram_31015(gl_31017, prog_31018) {

var F={procname:"ex3.checkProgram",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 12;
if (!gl_31017.getProgramParameter(prog_31018, gl_31017.LINK_STATUS)) {console.error(gl_31017.getProgramInfoLog(prog_31018));}; framePtr = framePtr.prev;
}
checkprogram_31015(gl_31068[0], program_31119[0]);
var positionattrib_31120 = /**/[gl_31068[0].getAttribLocation(program_31119[0], "position")];
var theta_31121 = /**/[0.0];
function HEX2F_19607(x_19609, y_19610) {

var result_19611 = 0.0;
var F={procname:"system./",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
F.line = 3168;
result_19611 = (x_19609 / y_19610);
framePtr = framePtr.prev;
return result_19611;
}
function HEX2BHEX3D_31147(x_31152, x_31152_Idx, y_31154) {

var F={procname:"+=.+=",prev:framePtr,filename:"c:\\dev\\nim-0.14.2\\lib\\system.nim",line:0};
framePtr = F;
F.line = 3314;
x_31152[x_31152_Idx] = (x_31152[x_31152_Idx] + y_31154);
framePtr = framePtr.prev;
}
function raiseIndexError() {

var e_12858 = null;
e_12858 = {m_type: NTI3252, parent: null, name: null, message: null, trace: null};
e_12858.message = makeNimstrLit("index out of bounds");
raiseException(e_12858, "IndexError");
}
function draw_31123(gl_31125) {

var F={procname:"ex3.draw",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
F.line = 89;
var bg_31126 = ((Math.cos(theta_31121[0]) + 1.0000000000000000e+000) / 2.0000000000000000e+000);
F.line = 92;
var model_31127 = makemodel_31048();
F.line = 93;
packedmodel_31115[0] = f32a_26903(model_31127);
gl_31125.bindBuffer(34962, vertices_31116[0]);
gl_31125.bufferData(34962, packedmodel_31115[0], 35048);
gl_31125.bindBuffer(34962, null);
gl_31125.viewport(0, 0, gl_31125.canvas.width, gl_31125.canvas.height);
gl_31125.clearColor(bg_31126, 0.0, 0.0, 1.0000000000000000e+000);
gl_31125.enable(2929);
gl_31125.depthFunc(515);
gl_31125.clear(16640);
gl_31125.useProgram(program_31119[0]);
gl_31125.bindBuffer(34962, vertices_31116[0]);
gl_31125.vertexAttribPointer(positionattrib_31120[0], 2, 5126, false, 0, 0);
gl_31125.enableVertexAttribArray(positionattrib_31120[0]);
gl_31125.drawArrays(1, 0, HEX2F_19607((model_31127 != null ? model_31127.length : 0), 2));
HEX2BHEX3D_31147(theta_31121, 0, 6.1359231515425647e-003);
L1: do {
F.line = 119;
var i_31187 = 0;
F.line = 3607;
var i_31200 = 0;
L2: do {
F.line = 3608;
L3: while (true) {
if (!(i_31200 < 4)) break L3;
F.line = 3607;
i_31187 = i_31200;
F.line = 120;
var at_31189 = ((theta_31121[0] * 8.0000000000000000e+000) - (addInt(mulInt(i_31187, 4), 1) * 3.1415926535897931e+000));
if ((0.0 < at_31189)) {
F.line = 122;
modelx_31046[0][chckIndx(i_31187, 0, modelx_31046[0].length)-0] = (startx_31030[chckIndx(i_31187, 0, startx_31030.length)-0] + (Math.sin((at_31189 * freqs_31040[chckIndx(i_31187, 0, freqs_31040.length)-0])) / 8.0000000000000000e+000));
}

i_31200 = addInt(i_31200, 1);
}
} while(false);
} while(false);
framePtr = framePtr.prev;
}
function animloop_31202() {

var F={procname:"ex3.animLoop",prev:framePtr,filename:"ex3.nim",line:0};
framePtr = F;
draw_31123(gl_31068[0]);
F.line = 126;
window.requestAnimationFrame(animloop_31202);framePtr = framePtr.prev;
}
if (!((gl_31068[0] == null))) {
canv_31067[0].width = window.innerWidth;
canv_31067[0].height = window.innerHeight;
draw_31123(gl_31068[0]);
animloop_31202();
}

